// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Lobby service models
enum LobbyVisibility {
  PUBLIC
  PRIVATE
}

model Lobby {
  id          String          @id @default(uuid())
  name        String
  imageUrl    String?
  description String
  visibility  LobbyVisibility @default(PUBLIC)
  capacity    Int             @default(30)
  ownerId     String          @unique
  owner       User            @relation("LobbyOwner", fields: [ownerId], references: [id])
  members     User[]          @relation("LobbyMembers")
  games       LobbyGame[]
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
}

// User models
enum UserRole {
  MEMBER
  ADMIN
  OWNER
}

model User {
  id       String  @id @default(cuid())
  steamId  String  @unique
  username String?
  avatar   String?

  // users member of a lobby
  lobbyId     String? // it might be or not be in a lobby group
  memberLobby Lobby?  @relation("LobbyMembers", fields: [lobbyId], references: [id])

  // owner of a lobby
  lobby Lobby? @relation("LobbyOwner") // it might own or not own a lobby group

  role      UserRole @default(MEMBER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Replay parsing data models
model LobbyGame {
  id          String        @id @default(uuid())
  duration    Int
  matchId     String        @unique
  gameWinner  String
  lobbyId     String
  lobby       Lobby         @relation(fields: [lobbyId], references: [id])
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  playerStats PlayerStats[]
}

model PlayerStats {
  id          String    @id @default(uuid())
  steamId     String
  playerName  String
  heroName    String
  gameTeam    String
  kills       Int
  deaths      Int
  assists     Int
  networth    Int
  lastHits    Int
  denies      Int
  level       Int
  lobbyGameId String
  lobbyGame   LobbyGame @relation(fields: [lobbyGameId], references: [id])
}

model Player {
  id            String   @id @default(uuid())
  steamId       String   @unique
  playerName    String
  totalGames    Int
  totalKills    Int
  totalDeaths   Int
  totalAssists  Int
  totalNetworth Int
  avgKills      Float
  avgDeaths     Float
  avgAssists    Float
  avgNetworth   Float
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}
